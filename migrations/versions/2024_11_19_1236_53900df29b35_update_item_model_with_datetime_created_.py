"""Update Item model with DateTime created_at and Enum category

Revision ID: 53900df29b35
Revises: eb61c4c11284
Create Date: 2024-11-19 12:36:54.625923

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '53900df29b35'
down_revision: Union[str, None] = 'eb61c4c11284'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # 1. (Optional) Handle existing data that doesn't conform to the new ENUM or TIMESTAMP format
    # Uncomment and adjust the following if necessary:
    # op.execute("""
    #     UPDATE items SET category = 'OTHER' 
    #     WHERE category NOT IN ('TOP', 'BOTTOM', 'SHOES', 'ACCESSORIES', 'INNERWEAR', 'OTHER');
    # """)
    # op.execute("""
    #     UPDATE items SET created_at = '2024-01-01 00:00:00+00' 
    #     WHERE created_at IS NULL OR created_at = '';
    # """)

    # 2. Create the ENUM type
    categoryenum = postgresql.ENUM(
        'TOP', 'BOTTOM', 'SHOES', 'ACCESSORIES', 'INNERWEAR', 'OTHER',
        name='categoryenum'
    )
    categoryenum.create(op.get_bind(), checkfirst=True)

    # 3. Alter the 'category' column using the ENUM type with a USING clause
    op.alter_column(
        'items',
        'category',
        existing_type=sa.VARCHAR(),
        type_=categoryenum,
        postgresql_using="category::categoryenum",
        nullable=False
    )

    # 4. Alter 'created_at' from VARCHAR to TIMESTAMP WITH TIME ZONE using a USING clause
    op.alter_column(
        'items',
        'created_at',
        existing_type=sa.VARCHAR(),
        type_=sa.TIMESTAMP(timezone=True),
        postgresql_using="created_at::timestamp with time zone",
        existing_nullable=True,
        server_default=sa.text('now()')
    )

    # 5. Create an index on 'items.name' if not already present
    op.create_index(op.f('ix_items_name'), 'items', ['name'], unique=False)

    # 6. Alter other columns to set nullable=False where applicable
    op.alter_column('body_measurements', 'user_details_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('body_measurements', 'height',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('body_measurements', 'weight',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('budgets', 'style_preferences_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('budgets', 'min_amount',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('budgets', 'max_amount',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('items', 'colors',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=False)
    op.alter_column('items', 'is_favorite',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('items', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('shopping_habits', 'style_preferences_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('shopping_habits', 'frequency',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('shopping_habits', 'preferred_retailers',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=False)
    op.alter_column('style_preferences', 'user_details_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('style_preferences', 'favorite_colors',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=False)
    op.alter_column('style_preferences', 'preferred_brands',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=False)
    op.alter_column('style_preferences', 'lifestyle_choices',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=False)
    op.alter_column('user_details', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('user_details', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('user_details', 'age',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('user_preferences', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('user_preferences', 'receive_notifications',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('user_preferences', 'allow_data_sharing',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=False)
    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # 1. Drop the index on 'items.name'
    op.drop_index(op.f('ix_items_name'), table_name='items')

    # 2. Revert 'created_at' from TIMESTAMP WITH TIME ZONE back to VARCHAR using a USING clause
    op.alter_column(
        'items',
        'created_at',
        existing_type=sa.TIMESTAMP(timezone=True),
        type_=sa.VARCHAR(),
        postgresql_using="created_at::varchar",
        nullable=True,
        server_default=sa.text('now()')
    )

    # 3. Revert the 'category' column back to VARCHAR using the USING clause
    op.alter_column(
        'items',
        'category',
        existing_type=postgresql.ENUM('TOP', 'BOTTOM', 'SHOES', 'ACCESSORIES', 'INNERWEAR', 'OTHER', name='categoryenum'),
        type_=sa.VARCHAR(),
        postgresql_using="category::varchar",
        nullable=True
    )

    # 4. Drop the ENUM type
    categoryenum = postgresql.ENUM(
        'TOP', 'BOTTOM', 'SHOES', 'ACCESSORIES', 'INNERWEAR', 'OTHER',
        name='categoryenum'
    )
    categoryenum.drop(op.get_bind(), checkfirst=True)

    # 5. Revert other columns to nullable=True where applicable
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('user_preferences', 'allow_data_sharing',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('user_preferences', 'receive_notifications',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('user_preferences', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('user_details', 'age',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('user_details', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('user_details', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('style_preferences', 'lifestyle_choices',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=True)
    op.alter_column('style_preferences', 'preferred_brands',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=True)
    op.alter_column('style_preferences', 'favorite_colors',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=True)
    op.alter_column('style_preferences', 'user_details_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('shopping_habits', 'preferred_retailers',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=True)
    op.alter_column('shopping_habits', 'frequency',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('shopping_habits', 'style_preferences_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('items', 'is_deleted',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('items', 'is_favorite',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('items', 'category',
               existing_type=sa.Enum('TOP', 'BOTTOM', 'SHOES', 'ACCESSORIES', 'INNERWEAR', 'OTHER', name='categoryenum'),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('items', 'colors',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=True)
    op.alter_column('budgets', 'max_amount',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('budgets', 'min_amount',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('budgets', 'style_preferences_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('body_measurements', 'weight',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('body_measurements', 'height',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('body_measurements', 'user_details_id',
               existing_type=sa.UUID(),
               nullable=True)
    # ### end Alembic commands ###
